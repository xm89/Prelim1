# Code largely from Professor Paszek.

using DifferentialEquations
using Plots
gr(size=(500,500), show = true)  #use the gr backend for plotting
#Function for part D
#u[1] = x; u[2] = y; u[3] = z
function partD!(du,u,p,t)
  alphax = 3.9*10^-2
  alphay = 4.3*10^-3
  betax = 6.1
  betay = 5.7
  degy = 1.05
  degz = 1.04
  zx = 1.3*10^-5
  yz = 11*10^-3
  xz = 12*10^-2
  xy = 7.9*10^-4
  nzx = 2.32
  nxy = 2
  nxz = 2
  nyz = 2
  s = 100

 du[1] =  (alphax+betax*s)/(1+s+(u[3]/zx)^nzx) - u[1]             #dx/dt
 du[2] =  (alphay +betay*s)/(1+s+(u[1]/xy)^nxy) - degy*u[2]       #dy/dt
 du[3] =  (1)/(1+(u[1]/xz)^nxz+(u[2]/yz)^nyz) - degz*u[3]        #dz/dt
end
# Cell initial state multiplier mcell1 = 1, mcell2 = 1.25, mcell3 = 0.75
m = 1
u0 = [m*5.499044091608997;m*0.003968843236107806;m*0.0004576369463005712]                      #intial conditions
tspan = (0.0,100)                     #start and end time
prob = ODEProblem(partD!,u0,tspan)     #Create an ODE problem for the PartD function
sol = solve(prob)                       #Solve the system

cell1sol = sol # stores the solution

 #repeat for cell 2
 # Cell initial state multiplier mcell1 = 1, mcell2 = 1.25, mcell3 = 0.75
 m = 1.25
 u0 = [m*5.499044091608997;m*0.003968843236107806;m*0.0004576369463005712]                       #intial conditions
 tspan = (0.0,100)                     #start and end time
 prob = ODEProblem(partD!,u0,tspan)     #Create an ODE problem for the PartD function
 sol = solve(prob)                       #Solve the system

 cell2sol = sol # stores the solution

 #repeat for cell 3
 # Cell initial state multiplier mcell1 = 1, mcell2 = 1.25, mcell3 = 0.75
 m = 0.75
 u0 = [m*5.499044091608997;m*0.003968843236107806;m*0.0004576369463005712]                        #intial conditions
 tspan = (0.0,100)                     #start and end time
 prob = ODEProblem(partD!,u0,tspan)     #Create an ODE problem for the PartD function
 sol = solve(prob)                       #Solve the system

 cell3sol = sol # stores the solution

# Failed attempt at plotting on the same plot. I dislike Julia.
#Plot the results; the vars=(0,3) argument specifies to plot Z (column 1 of sol)
#vs t (column 0 of sol)
# Plots results as detailed above for all cells

# To check lengths of the solutions so that they can be matched to the smallest legnth
# If I really cared I'd make it check for the lowest length and change lines 67-72 to
# automatically change so I don't have to do it manually.
#print(length(cell1sol),length(cell2sol),length(cell3sol))

# Stores just the z variables to make easier to work with variables. And attatches the ss value at the start.
cell1solnew = vcat([0.0004576369,0.0004576369,0.0004576369,0.0004576369,0.0004576369],cell1sol[3,1:length(cell2sol)])
cell2solnew = vcat([0.0004576369,0.0004576369,0.0004576369,0.0004576369,0.0004576369],cell2sol[3,1:length(cell2sol)])
#cuts off last 2 values of cell3 because it doesn't match cell1 and 2 in length.
cell3solnew = vcat([0.0004576369,0.0004576369,0.0004576369,0.0004576369,0.0004576369],cell3sol[3,1:length(cell2sol)])
time = vcat([-5,-4,-3,-2,-1],cell2sol.t)

plt1 = plot(time,[cell1solnew,cell2solnew,cell3solnew], xaxis="t", yaxis = "Z", label = ["cell1" "cell2" "cell3"], title = "above hopf" )
display(plt1)

# solves the system to get the inital ss variabls
function partD!(du,u,p,t)
  alphax = 3.9*10^-2
  alphay = 4.3*10^-3
  betax = 6.1
  betay = 5.7
  degy = 1.05
  degz = 1.04
  zx = 1.3*10^-5
  yz = 11*10^-3
  xz = 12*10^-2
  xy = 7.9*10^-4
  nzx = 2.32
  nxy = 2
  nxz = 2
  nyz = 2
  s = 30000

 du[1] =  (alphax+betax*s)/(1+s+(u[3]/zx)^nzx) - u[1]             #dx/dt
 du[2] =  (alphay +betay*s)/(1+s+(u[1]/xy)^nxy) - degy*u[2]       #dy/dt
 du[3] =  (1)/(1+(u[1]/xz)^nxz+(u[2]/yz)^nyz) - degz*u[3]        #dz/dt
end

u0 = [0.0;0.0;0.0]                      #intial conditions
tspan = (0.0,200)                     #start and end time
prob = ODEProblem(partD!,u0,tspan)     #Create an ODE problem for the PartD function
sol = solve(prob)                       #Solve the system

#Plot the results; the vars=(0,1) argument specifies to plot X (column 1 of sol)
#vs t (column 0 of sol)
#plt5 = plot(sol,vars=(0,1), xaxis="t", yaxis = "X to find ss")
#display(plt5)

#Plot the results; the vars=(0,3) argument specifies to plot Z (column 3 of sol)
#vs t
# Plot the value of Y vs time
#plt4 = plot(sol,vars=(0,2), xaxis="t", yaxis = "Y to find ss")
#display(plt4)
#plt2 = plot(sol,vars=(0,3), xaxis="t", yaxis = "Z to find ss")
#display(plt2)
#Plot the results; the vars=(1,2,3) argument specifies to plot X vs Y vs Z
#plt3 = plot(sol,vars=(1,2,3), xaxis="X", yaxis="Y", zaxis="Z")
#display(plt3)

# Prints the stable steady state values (prints long time values)
# Only used in the first part of each bifurcation point analysis.
print("The steady state values of Xss,Yss,Zss are:")
print(sol[length(sol)])
